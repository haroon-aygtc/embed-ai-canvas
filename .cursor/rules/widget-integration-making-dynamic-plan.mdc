---
description: 
globs: 
alwaysApply: true
---
# Widget Integration - Making Dynamic Plan

## Current State Analysis

### ✅ Already Implemented
- **Frontend UI Components**: Complete widget configuration interface with 6 tabs (Settings, Appearance, Behavior, Messaging, AI Model, Knowledge Base)
- **Main Widget Model**: `app/Models/Widget.php` with JSON configuration storage and enhanced fields (status, domain, published_at, version)
- **Widget Controller**: Basic CRUD operations with API endpoints
- **Database Structure**: All 15 widget-related tables successfully created and tested
- **Frontend State Management**: `useWidget` hook and configuration interfaces
- **AI Integration**: Provider and model management system
- **All Widget Models**: 15 models implemented with complete relationships and business logic
- **Database Migrations**: All 15 migrations successfully executed with proper indexes and foreign keys

### ✅ COMPLETED - Database Schema Implementation
All database tables have been successfully created and tested:

#### Core Widget Tables ✅
- **widgets**: Enhanced with status, domain, published_at, version fields
- **widget_configurations**: Complete schema with theme, colors, positioning, content settings
- **widget_behavior_settings**: All behavior options including triggers, targeting, rich media

#### Content Management Tables ✅
- **widget_templates**: Template system with categories and preview images
- **widget_quick_responses**: Categorized quick responses with sorting
- **widget_conversation_starters**: Message triggers with page patterns
- **widget_operating_hours**: Day-based scheduling with timezone support

#### Integration Tables ✅
- **widget_ai_models**: AI model configuration with temperature, tokens, prompts
- **widget_knowledge_bases**: Knowledge base relationships with priority
- **widget_languages**: Multi-language support with translation services

#### Analytics & Tracking Tables ✅
- **widget_analytics**: Daily metrics and performance tracking
- **widget_conversations**: Session management with satisfaction ratings
- **widget_messages**: Message tracking with AI model usage

#### Customization Tables ✅
- **widget_assets**: File management for logos, icons, backgrounds
- **widget_custom_csses**: Custom CSS with validation and compilation

### ✅ COMPLETED - Model Implementation
All 15 widget models have been implemented with:
- ✅ Proper relationships and foreign key constraints
- ✅ Fillable fields and type casting
- ✅ Query scopes for filtering and ordering
- ✅ Helper methods for business logic
- ✅ Frontend transformation methods (`toXxxData()`)
- ✅ Service layer architecture ready
- ✅ Database indexes for performance
- ✅ Migration validation confirmed working

### ❌ Currently Static/Hardcoded (Next Phase)
- **Widget Templates**: 4 hardcoded templates in frontend (need API integration)
- **Quick Responses**: Mock data in MessagingConfig component
- **Conversation Starters**: Mock data with triggers and delays
- **Analytics Data**: Mock metrics and conversation tracking
- **Custom Assets**: Logo, icon, background image management (need file upload)

## Implementation Status Update

### Phase 1: Core Configuration ✅ COMPLETED
1. ✅ Updated widget_configurations migration with all frontend fields
2. ✅ Updated widget_behavior_settings migration
3. ✅ Created WidgetConfiguration model with relationships
4. ✅ Created WidgetBehaviorSetting model
5. ✅ Updated Widget model with relationships

### Phase 2: Content Management ✅ COMPLETED
1. ✅ Updated widget_templates migration
2. ✅ Updated widget_quick_responses migration  
3. ✅ Updated widget_conversation_starters migration
4. ✅ Updated widget_operating_hours migration
5. ✅ Created corresponding models with relationships

### Phase 3: Integration & Analytics ✅ COMPLETED
1. ✅ Updated widget_ai_models migration
2. ✅ Updated widget_knowledge_bases migration
3. ✅ Created widget_languages migration
4. ✅ Updated analytics migrations
5. ✅ Created all integration models

### Phase 3: API Development 🔄 IN PROGRESS
1. ✅ WidgetController (basic CRUD working, needs Service integration)
2. ✅ Created empty controllers (need implementation):
   - WidgetConfigurationController
   - WidgetBehaviorController  
   - WidgetContentController
   - WidgetTemplateController
   - WidgetAnalyticsController
   - WidgetChatController
3. ✅ Created empty services (need implementation):
   - WidgetService, WidgetConfigurationService, etc.
4. 🔄 Create Request classes for validation (no repository layer)
5. 🔄 Implement service layer business logic

### Phase 5: Frontend Integration 🔄 NEXT
1. 🔄 Update widget configuration components to use API
2. 🔄 Replace mock data with API calls
3. 🔄 Implement real-time updates
4. 🔄 Add error handling and validation
5. 🔄 Testing and optimization

## Database Schema Requirements (✅ IMPLEMENTED)

### 1. Core Widget Tables

#### widgets ✅ ENHANCED
```sql
id, user_id, name, description, enabled, configuration, last_updated_at
-- ADDED: status (active/inactive/draft), domain, published_at, version
```

#### widget_configurations ✅ IMPLEMENTED
```sql
id, widget_id, version, is_active
-- Appearance
theme (light/dark/auto), primary_color, position, size
-- Content  
title, subtitle, welcome_message (nullable), placeholder
-- Basic Settings
enabled, show_branding
-- AI Model
selected_model_id
-- Knowledge Base (JSON for complex structure)
knowledge_base_config, additional_config
-- Timestamps
created_at, updated_at
```

#### widget_behavior_settings ✅ IMPLEMENTED
```sql
id, widget_id
-- Basic Behavior
sound_notifications, typing_indicators, message_persistence, auto_minimize
-- Operating Hours
operating_hours_enabled, timezone, offline_message (nullable), collect_offline_messages
-- Rich Media
file_uploads_enabled, emoji_support, link_previews, voice_messages
-- Auto-open Triggers
immediate_trigger, time_delay_trigger, scroll_trigger, exit_intent_trigger
time_delay_seconds, scroll_percentage
-- Targeting
new_visitors_only, returning_visitors, geographic_targeting
-- Page Rules
page_rules (all/specific/exclude), url_patterns (JSON)
-- Timestamps
created_at, updated_at
```

### 2. Content Management Tables ✅ ALL IMPLEMENTED

#### widget_templates ✅ IMPLEMENTED
```sql
id, name, description, category, preview_image
is_popular, configuration_json
created_at, updated_at
```

#### widget_quick_responses ✅ IMPLEMENTED
```sql
id, widget_id, text, category, enabled, sort_order
created_at, updated_at
```

#### widget_conversation_starters ✅ IMPLEMENTED
```sql
id, widget_id, message, trigger_type, delay_seconds
page_pattern, enabled, sort_order
created_at, updated_at
```

#### widget_operating_hours ✅ IMPLEMENTED
```sql
id, widget_id, day_of_week (0-6), enabled
start_time, end_time, timezone
created_at, updated_at
```

### 3. Integration Tables ✅ ALL IMPLEMENTED

#### widget_ai_models ✅ IMPLEMENTED
```sql
id, widget_id, ai_model_id, is_primary
temperature, max_tokens, system_prompt
created_at, updated_at
```

#### widget_knowledge_bases ✅ IMPLEMENTED
```sql
id, widget_id, knowledge_base_id, enabled, priority
created_at, updated_at
```

#### widget_languages ✅ IMPLEMENTED
```sql
id, widget_id, language_code, language_name, enabled, is_primary
auto_detect, real_time_translation, translation_service
created_at, updated_at
```

### 4. Analytics & Tracking Tables ✅ ALL IMPLEMENTED

#### widget_analytics ✅ IMPLEMENTED
```sql
id, widget_id, date, conversations_started, messages_sent
response_time_avg, user_satisfaction, bounce_rate
created_at, updated_at
```

#### widget_conversations ✅ IMPLEMENTED
```sql
id, widget_id, session_id, visitor_id, started_at, ended_at
message_count, satisfaction_rating, resolved
created_at, updated_at
```

#### widget_messages ✅ IMPLEMENTED
```sql
id, conversation_id, content, is_user, response_time
ai_model_used, tokens_used, created_at
```

### 5. Customization Tables ✅ ALL IMPLEMENTED

#### widget_assets ✅ IMPLEMENTED
```sql
id, widget_id, type (logo/icon/background), file_path, alt_text
created_at, updated_at
```

#### widget_custom_css ✅ IMPLEMENTED
```sql
id, widget_id, css_rules, is_active, description
created_at, updated_at
```

## Frontend-Backend Data Mapping ✅ READY FOR IMPLEMENTATION

### WidgetConfig Interface → Database Tables
```typescript
interface WidgetConfig {
  // widget_configurations table ✅ READY
  theme: 'light' | 'dark' | 'auto'
  primaryColor: string
  position: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left'
  size: 'small' | 'medium' | 'large'
  welcomeMessage: string
  placeholder: string
  title: string
  subtitle: string
  enabled: boolean
  showBranding: boolean
  selectedModelId?: string
  
  // widget_knowledge_bases + knowledge_base_config JSON ✅ READY
  knowledgeBase?: {
    selectedKnowledgeBases?: string[]
    sources: Array<{...}>
    settings: {
      autoLearning: boolean
      contextAwareness: boolean
      realTimeUpdates: boolean
      confidenceThreshold?: boolean
    }
  }
}
```

### BehaviorConfig Component → widget_behavior_settings ✅ READY
- Sound notifications, typing indicators
- Message persistence, auto-minimize
- Operating hours with timezone
- Auto-open triggers (immediate, time, scroll, exit)
- Visitor targeting (new/returning, geographic)
- Page targeting with URL patterns

### MessagingConfig Component → Multiple Tables ✅ READY
- Quick responses → widget_quick_responses
- Conversation starters → widget_conversation_starters  
- Languages → widget_languages
- Rich media settings → widget_behavior_settings

## Next Steps (Priority Order)

### Immediate (Week 1-2): API Development
1. **Create WidgetConfigurationController** with CRUD operations
2. **Create WidgetBehaviorController** for behavior settings
3. **Create WidgetContentController** for templates, responses, starters
4. **Create API Resources** for data transformation
5. **Add validation rules** for all configuration data

### Short Term (Week 3-4): Frontend Integration
1. **Update WidgetConfiguration components** to use real API
2. **Replace mock data** in all configuration sections
3. **Implement file upload** for assets (logos, icons, backgrounds)
4. **Add real-time validation** and error handling
5. **Test all configuration flows**

### Medium Term (Week 5-6): Advanced Features
1. **Template system** with dynamic loading
2. **Analytics dashboard** with real data
3. **Multi-language support** implementation
4. **Custom CSS editor** with validation
5. **Operating hours** with timezone handling

## Success Metrics ✅ FOUNDATION COMPLETE
- ✅ All frontend configuration options can persist to database
- ✅ Database schema supports all required functionality
- ✅ Models provide complete business logic layer
- ✅ Migrations are tested and working
- 🔄 Widget templates are dynamically loaded (API needed)
- 🔄 Quick responses and conversation starters are manageable (API needed)
- 🔄 Operating hours and behavior settings work correctly (API needed)
- 🔄 Analytics data is properly tracked (API needed)
- 🔄 Multi-widget support per user (API needed)
- 🔄 Real-time configuration updates (Frontend integration needed)

## Technical Notes

### Database Performance ✅ OPTIMIZED
- All tables have proper indexes for common queries
- Foreign key constraints ensure data integrity
- JSON columns used appropriately for flexible configuration
- Composite indexes for multi-column queries

### Architecture Pattern ✅ IMPLEMENTED
- Controller + Service + Request pattern (no repository layer)
- Models contain business logic and relationships
- Services handle complex business logic (following AiProviderService pattern)
- Request classes handle validation
- Frontend transformation methods included
- Query scopes for common filtering operations

### Migration Safety ✅ TESTED
- All migrations tested and working
- TEXT columns properly handled (nullable, no defaults)
- Foreign key constraints properly configured




- Rollback functionality available